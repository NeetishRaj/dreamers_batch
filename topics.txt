JS Part 2: JS functions
#######################


Functions in JavaScript

    - Ways of creating a function in JS
        1. Function declaratation
            Syntax: 
                function name() {
                    //function body
                }
        2. Function expression
            Syntax: 
                const name = function() {
                    // function body
                }
        3. Function expression with Arrow function
            Syntax: const name = () => {
                // function body
            }

    - handling arguments in JS
    - Scope
        1. Global Scope
        2. Function Scope
        3. Block Scope
            Only followed by let and const


    - Hoisting for var and function declaratations



Important Points
################

Q. Which one should you use among var, let and const?

A. var shouldn't be used anymore, it's not recommended.
    We should be using 

    let - if the variable's value will change.
    const - if the variable's value  will never change.


Q. will this code produce error?

function test() {

    {
        var t = 1;
    }

    console.log(t * 5)
}

test();

A. No


Q. will this code produce error?

function is_senior(age) {
    {
        const AGE_LIMIT  = 60;
    }

    if(age > AGE_LIMIT) {
        return true;
    } else {
        return false
    }
}

is_senior(55);

A. Yes, because AGE_LIMIT is not accessible outside block


Q. What is the problem with this code?

let MAX_AGE = 60;

function is_senior(age) {
    let MAX_AGE = 55;

    if(age > MAX_AGE) {
        return true;
    } else {
        return false
    }
}
is_senior(58);

A. redeclaring MAX_AGE twice using let



Q. What is the problem with this code?

var MAX_AGE = 60;

function is_senior(age) {
    var MAX_AGE = 55;

    if(age > MAX_AGE) {
        return true;
    } else {
        return false
    }
}
is_senior(58);

A.  This code will not throw error and will work. But this not recommended to create duplicate variables  or redeclare again.




Q. How will this code be interpreted by Compiler?

    i. 
        add(10, 20)
        function add(num1, num2) {
            return num1 + num2;
        }

    A:  function add(num1, num2) {
            return num1 + num2;
        }

        add(10, 20);



    ii. 
        function multiply_10(num) {
            a = 10;
            const result = num  * a;
            var a = 0;
            return result;
        }

    A: 
        function multiply_10(num) {
            var a = undefined;
            a = 10;
            const result = num  * a;
            a = 0;
            return result;
        }


    
Q: Does let and const allow Hoisting?
A: NO
