Advanced JS Part 1
##################


Everything about functions

    - lexical scoping of 'this' in arrow functions.
    - currying 
    - method chaining
    - IIFE (Immediately invoked function expressions)
        Syntax:
            (function() {

            })()
    - call, apply and bind methods
        We use these functions to bind with 'this'
        
        NOTE: binding of this doesn't work on arrow functions






Important Points
################


Q. Guess the output.

    let num = 10;
    const obj = {add: () => ++this.num}

    console.log(obj.add());

A. NaN 
    because ++ on undefined is NaN


Q. Guess the output.
    var num = 10;
    const obj = {add: () => ++this.num}

    console.log(obj.add());

A. 11


Q. Guess the output.
    var num = 10;
    const obj = {
        add: function() {
            return ++this.num;
        }
    }

    console.log(obj.add());

A. NaN

    Because Obj.num is undefined
    and ++ on undefined is NaN



Q. Guess the output

    const func = (a) => () => (b) => () => a * b;   
    console.log(func(10)(20)(30)(40));

A.  300

    const func = function(a) {
        return function () {
            return function (b) {
                return function () {
                    return a * b;
                }
            }
        }
    }


Q. Guess the output.

    const arr = [1, 2, 3, 4];

    const result = arr
        .join('-')
        .repeat(2)
        .toUpperCase()
        .split('');

    console.log(result[6]);

A. 4

    arr.join('-')                   --> '1-2-3-4'
    '1-2-3-4'.repeat(2)             --> '1-2-3-41-2-3-4'
    '1-2-3-41-2-3-4'.toUpperCase()  --> '1-2-3-41-2-3-4'
    '1-2-3-41-2-3-4'.split('')      -->  ['1', '-', '2', '-', '3', '-', '4', '1', '-', '2', '-', '3', '-', '4']



Q. Guess the output

    const a = 40;
    (function(a) {
        console.log(a);
    })(20);

A. 20

Q. Guess the output

    
    let a = (function(a) {
        return a;
    })(20);

    console.log(a);

A. 20


Q. Guess the output

    
    let a = (function(a) {
        return {a};
    })(20);

    console.log(a);

A. {a: 20}


Q. Guess the output

    const obj1 = {a: 1, b: 2};
    const obj2 = {a: 10, b: 20};

    function add() {
        return this.a + this.b;
    }

    console.log(add.call(obj1) + add.apply(obj2));

A. 33

    Because:
        add.call(obj1) = 3
        add.apply(obj2) = 30



Q. Correct the 'print_address' to get proper output without undefined
    like this - 'City: LA, Country: USA

        function print_address() {
            console.log(`City: ${this.city}, Country: ${this.country}`);
        }

        const rahul = {
            name: 'rahul',
            age: 22,
            address: {
                street: '24 avenue',
                city: 'LA',
                country: 'USA'
            }
        }

        print_address.bind(rahul)();

A. 
    function print_address() {
        console.log(`City: ${this.address.city}, Country: ${this.address.country}`);
    }


Q.  Guess the output

    const obj1 = {a: 1}
    const obj2 = {a: 10}

    function add_10(num) {
        return this.a + num + 10;
    }

    console.log(add_10.bind(obj1)(20)); 
    console.log(add_10.bind(obj2)(25));

A. 
    31
    45

    because
        add_10.bind(obj1)(20) - 1 + 20 + 10  = 31
        add_10.bind(obj2)(25) - 10 + 25 + 10 = 45