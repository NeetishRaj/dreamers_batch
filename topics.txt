JS Part 15: Try-catch, Async Await
##################################


Try catch  finally
    Used for Error handling

    Syntax: 
        try {
            // Error prone code here
        } catch(err) {
            // Error handling code here
        } finally {
            // This will always be executed
        }

Catch block in Promise chains

    some_promise
        .then(() => {
            // some operation
        })
        .then(() => {
            // some operation
        })
        .catch((error) => {
            // handle the error here
        })
        .finally(() => {
            // this will always be executed
        })


Async await
    An async function is a function declared with the async keyword,
    and the await keyword is permitted within it. The async and await 
    keywords enable asynchronous, promise-based behavior to be written
    in a cleaner style, avoiding the need to explicitly configure 
    promise chains.


JSON
    It's a Data exchange format based on JavaScript object.
    It's basically a string that looks exactly like a JS object.

    Data types supported by JSON
        Array
        Objects
        String
        Number
        boolean
        null

    JSON notation
        Syntax:
            {
                "prop": "value"
            }
            
    JSON.stringify()
    JSON.parse()

Important Questions
###################

Q. Guess the output

    try {
        const a = 23;
        a += 2;
        console.log(a);
    }  catch(error) {
        console.log(a);
    }

A. undefined

Q. Guess the output
    let a = 10;
    try {
        console.log(a);
        a += 2;
    }  catch(error) {
        console.log(a);
    }
    console.log(a);

A. 
    10
    12


Q. Guess the output
    const a = 10;
    try {
        console.log(a);
        a += 2;
    }  catch(error) {
        console.log(a);
    }
    console.log(a);

A. 
    10
    10
    10


Q. Guess the output
    let str = 'a';
    try {
        console.log(str);
        st.concat('b');
    }  catch(error) {
        console.log(str);
        str = str.concat('c');
    } finally {
        str += 'd';
    }
    console.log(str);

A. 
    a
    a
    acd


Q. Guess the output

    new Promise((a) => {
        a(10);
    })
    .then(val => {
        console.log(val * 10);
        return val * 10;
    })
    .then(val => {
        console.log(val * 20);
    })
    .catch((e) => {
        console.log(a);
    })
    .finally((a) => {
        console.log(a);
    })

A. 
    100
    2000
    undefined


Q. Guess the output

    new Promise((a) => {
        a(10);
    })
    .then(val => {
        console.log(val * 10);
        return val * 10;
    })
    .then(val => {
        console.log(val * 20);
        val.NonExisitingFunction();
    })
    .catch((e) => {
        console.log("Catch Block");
    })
    .finally((a) => {
        console.log("Finally Block");
    })

A. 
    100
    2000
    Catch Block
    Finally Block


Q. Guess the output

    new Promise((a, b) => {
        b(20);
        a(10);
    })
    .then(val => {
        console.log(val * 10);
        return val * 10;
    })
    .then(val => {
        console.log(val * 20);
        val.NonExisitingFunction();
    })
    .catch((e) => {
        console.log("Catch Block");
    })
    .finally((a) => {
        console.log("Finally Block");
    })

A. 
    Catch Block
    Finally Block


Q. What's the problem with this code?

    async function print_hello_async() {
        return new Promise((a, b) => {
            a("hello there");
        })
    }

    const result = await print_hello_async();
    console.log(result);

A. This code has 2 problems

    1. print_hello_async function doesn't need to have a 'async' keyword as 
        we are not doing any await operation inside it.

    2. we are doing await operation in the global scope.
        await operationns require an async function  wrapper.


Q. How to make this code working.

    function wait() {
        return new Promise((a, b) => {
            setTimeout(() => {
                a(20);
            }, 2000)
        })
    }

    async function func_async() {
        const result = wait();

        console.log(result); // 20
    }

    func_async();

A.  use await inside func_async
     const result = await wait();




    
    

